/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "usb_device.h"


/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart3;

/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
const osThreadAttr_t defaultTask_attributes = {
  .name = "defaultTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for movingSem */
osSemaphoreId_t movingSemHandle;
const osSemaphoreAttr_t movingSem_attributes = {
  .name = "movingSem"
};
/* Definitions for stopSem */
osSemaphoreId_t stopSemHandle;
const osSemaphoreAttr_t stopSem_attributes = {
  .name = "stopSem"
};
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM3_Init(void);
static void MX_I2C2_Init(void);
void StartDefaultTask(void *argument);

/* USER CODE BEGIN PFP */


//////////// Functions /////////

void movingForward();
void movingBackward();
void stop();
void turnRightFront();
void turnLeftFront();
void HAL_TIM_IC_CaptureCallback();
void convert_int_to_char();
void lcd_send_cmd(char cmd);
void lcd_send_string();
void MPU6050_Read_Accel();
void MPU6050_Read_Gyro();

//////////// Ultrasonic variables  /////////

uint32_t rise_time, fall_time, period = 0;
uint8_t count = 0;
int distance;
char dist[6];
#define SLAVE_ADDRESS_LCD 0x4E
#define DISTANCE_THRESHOLD 10

///// Accelerometer variables ///

#define SMPLRT_DIV_REG 0X19
#define GYRO_CONFIG_REG 0X1B
#define ACCEL_CONFIG_REG 0X1C
#define ACCEL_XOUT_H_REG 0X3B
#define TEMP_OUT_H_REG 0X41
#define GYRO_XOUT_H_REG 0X43
#define PWR_MGMT_1_REG 0X6B
#define WHO_AM_I_REG 0X75
#define MPU6050_ADDR 0x68


char but[6];

float Accel_X_RAW, Accel_Y_RAW, Accel_Z_RAW;
float Gyro_X_RAW, Gyro_Y_RAW, Gyro_Z_RAW;
float Ax, Ay, Az;
float Gx, Gy, Gz;


///// Infrared variables ///

int Infrared1 = 0;
int Infrared2 = 0;

////////////////////////////// TASKS  ///////////////////////////

void Infrared(void *argument) {
    while (1) {
    	osSemaphoreAcquire(movingSemHandle, osWaitForever);

    	Infrared1 = HAL_GPIO_ReadPin(INF1_GPIO_Port, INF1_Pin);
    	Infrared2 = HAL_GPIO_ReadPin(INF2_GPIO_Port, INF2_Pin);


        if (Infrared1 == GPIO_PIN_RESET && Infrared2 == GPIO_PIN_RESET ) {

            movingForward();
        }

        else if (Infrared1 == GPIO_PIN_SET && Infrared2 == GPIO_PIN_RESET) {

            turnLeftFront();

        }

        else if (Infrared1 == GPIO_PIN_RESET && Infrared2 == GPIO_PIN_SET) {

            turnRightFront();
        }

        else if (Infrared1 == GPIO_PIN_SET && Infrared2 == GPIO_PIN_SET) {

            stop();
        }

        osSemaphoreRelease(movingSemHandle);

    }
}


void DetectTask(void *argument){

    while(1){

        HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin,GPIO_PIN_SET);
		HAL_Delay(10);
		HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin,GPIO_PIN_RESET);

		HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
		distance = period/58;


  		if (distance < DISTANCE_THRESHOLD){
            HAL_GPIO_WritePin ( LED1_GPIO_Port , LED1_Pin , GPIO_PIN_SET ) ;
            osSemaphoreAcquire(movingSemHandle, osWaitForever);
  			osSemaphoreRelease(stopSemHandle);
  		} else {

  		    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

  		        }
  		    }
  		}

void StopTask(void *argument){
  while(1){

        osSemaphoreAcquire(stopSemHandle,osWaitForever);
        stop();
		vTaskDelay(500 / portTICK_PERIOD_MS);
		stop();
        osSemaphoreRelease(movingSemHandle);
  }
}


void LCDScreenTask(void *argument){
	while(1){

		sprintf(dist, "%d", distance);
		lcd_send_cmd(0x80);
		lcd_send_string(" Ultrasonido");

		lcd_send_cmd(0x80);
		lcd_send_string("Distance: ");
		lcd_send_string(dist);
		lcd_send_string(" cm");
		lcd_send_string(" ");
		vTaskDelay(1000 / portTICK_PERIOD_MS);
	}
}

void LCDwithAcelerometer(void *argument)
{

	while(1){

		    MPU6050_Read_Accel();
		    MPU6050_Read_Gyro();

	        lcd_send_cmd(0x01); // Clear screen

	        HAL_Delay(1000);

	        lcd_send_cmd(0x80 | 0x00);
	        lcd_send_string("Ax=");
	        sprintf(but, "%.2f", Ax);
	        lcd_send_string(but);
	        lcd_send_string("g");

	        lcd_send_cmd(0x80 | 0x40);
	        lcd_send_string("Ay=");
	        sprintf(but, "%.2f", Ay);
	        lcd_send_string(but);
	        lcd_send_string("g");

	        HAL_Delay(1000);

	        lcd_send_cmd(0x01);

	        HAL_Delay(250);

	        lcd_send_cmd(0x80 | 0x00);
	        lcd_send_string("Az=");
	        sprintf(but, "%.2f", Az);
	        lcd_send_string(but);
	        lcd_send_string("g");

	        lcd_send_cmd(0x80 | 0x40);
	        lcd_send_string("Gx=");
	        sprintf(but, "%.2f", Gx);
	        lcd_send_string(but);

	        HAL_Delay(1000);

	        lcd_send_cmd(0x01);

	        HAL_Delay(250);

	        lcd_send_cmd(0x80 | 0x00);
	        lcd_send_string("Gy=");
	        sprintf(but, "%.2f", Gy);
	        lcd_send_string(but);

	        lcd_send_cmd(0x80 | 0x40);
	        lcd_send_string("Gz=");
	        sprintf(but, "%.2f", Gz);
	        lcd_send_string(but);

	        HAL_Delay(1000);
		    }

	     }
/////////////////////////// FUNCTIONS //////////////////////////////

/////////////////// MOVEMENT FUNCTIONS //////////////////////////////

void movingBackward(){
    //motor A wheels
    HAL_GPIO_WritePin(IN1A_GPIO_Port, IN1A_Pin,GPIO_PIN_RESET);
    HAL_GPIO_WritePin(IN2A_GPIO_Port, IN2A_Pin,GPIO_PIN_SET);
    HAL_GPIO_WritePin(IN3A_GPIO_Port, IN3A_Pin,GPIO_PIN_SET);
    HAL_GPIO_WritePin(IN4A_GPIO_Port, IN4A_Pin,GPIO_PIN_RESET);
    //motor B wheels
    HAL_GPIO_WritePin(IN1B_GPIO_Port, IN1B_Pin,GPIO_PIN_SET);
    HAL_GPIO_WritePin(IN2B_GPIO_Port, IN2B_Pin,GPIO_PIN_RESET);
    HAL_GPIO_WritePin(IN3B_GPIO_Port, IN3B_Pin,GPIO_PIN_RESET);
    HAL_GPIO_WritePin(IN4B_GPIO_Port, IN4B_Pin,GPIO_PIN_SET);
}
void movingForward(){
	//motor A wheels
	 HAL_GPIO_WritePin(IN1A_GPIO_Port, IN1A_Pin,GPIO_PIN_SET);
	 HAL_GPIO_WritePin(IN2A_GPIO_Port, IN2A_Pin,GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(IN3A_GPIO_Port, IN3A_Pin,GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(IN4A_GPIO_Port, IN4A_Pin,GPIO_PIN_SET);
	 //motor B wheels
	 HAL_GPIO_WritePin(IN1B_GPIO_Port, IN1B_Pin,GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(IN2B_GPIO_Port, IN2B_Pin,GPIO_PIN_SET);
	 HAL_GPIO_WritePin(IN3B_GPIO_Port, IN3B_Pin,GPIO_PIN_SET);
	 HAL_GPIO_WritePin(IN4B_GPIO_Port, IN4B_Pin,GPIO_PIN_RESET);
}
void stop(){
	//motor A wheels
    HAL_GPIO_WritePin(IN1A_GPIO_Port, IN1A_Pin,GPIO_PIN_RESET);
    HAL_GPIO_WritePin(IN2A_GPIO_Port, IN2A_Pin,GPIO_PIN_RESET);
    HAL_GPIO_WritePin(IN3A_GPIO_Port, IN3A_Pin,GPIO_PIN_RESET);
    HAL_GPIO_WritePin(IN4A_GPIO_Port, IN4A_Pin,GPIO_PIN_RESET);
    //motor B wheels
    HAL_GPIO_WritePin(IN1B_GPIO_Port, IN1B_Pin,GPIO_PIN_RESET);
    HAL_GPIO_WritePin(IN2B_GPIO_Port, IN2B_Pin,GPIO_PIN_RESET);
    HAL_GPIO_WritePin(IN3B_GPIO_Port, IN3B_Pin,GPIO_PIN_RESET);
    HAL_GPIO_WritePin(IN4B_GPIO_Port, IN4B_Pin,GPIO_PIN_RESET);
}
void turnRightFront(){
	//motor A wheels
	 HAL_GPIO_WritePin(IN1A_GPIO_Port, IN1A_Pin,GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(IN2A_GPIO_Port, IN2A_Pin,GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(IN3A_GPIO_Port, IN3A_Pin,GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(IN4A_GPIO_Port, IN4A_Pin,GPIO_PIN_SET);
	 //motor B wheels
	 HAL_GPIO_WritePin(IN1B_GPIO_Port, IN1B_Pin,GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(IN2B_GPIO_Port, IN2B_Pin,GPIO_PIN_SET);
	 HAL_GPIO_WritePin(IN3B_GPIO_Port, IN3B_Pin,GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(IN4B_GPIO_Port, IN4B_Pin,GPIO_PIN_RESET);
}
void turnLeftFront(){
	 //motor A wheels
	 HAL_GPIO_WritePin(IN1A_GPIO_Port, IN1A_Pin,GPIO_PIN_SET);
	 HAL_GPIO_WritePin(IN2A_GPIO_Port, IN2A_Pin,GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(IN3A_GPIO_Port, IN3A_Pin,GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(IN4A_GPIO_Port, IN4A_Pin,GPIO_PIN_RESET);
	 //motor B wheels
	 HAL_GPIO_WritePin(IN1B_GPIO_Port, IN1B_Pin,GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(IN2B_GPIO_Port, IN2B_Pin,GPIO_PIN_RESET);
	 HAL_GPIO_WritePin(IN3B_GPIO_Port, IN3B_Pin,GPIO_PIN_SET);
	 HAL_GPIO_WritePin(IN4B_GPIO_Port, IN4B_Pin,GPIO_PIN_RESET);
}

/////////////////////// ULTRASONIC CONFIGURATION /////////////////////////////////

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {

		if (count == 0) {
			rise_time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
			count = 1;
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
		}

		else if (count == 1) {

			fall_time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
			__HAL_TIM_SET_COUNTER(htim, 0);

			if (fall_time > rise_time) {
				period = fall_time - rise_time;
			}
			count = 0;
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}
}

//////////////////////// LCD SCREEN CONFIGURATION //////////////////////


void lcd_init2(){

	HAL_Delay(50);
	lcd_send_cmd(0x30);
	HAL_Delay(5);
    lcd_send_cmd(0x30);
    HAL_Delay(1);
    lcd_send_cmd(0x30);
    HAL_Delay(10);
    lcd_send_cmd(0x20);
    HAL_Delay(10);


    lcd_send_cmd(0x28);
    HAL_Delay(1);
    lcd_send_cmd(0x08);
    HAL_Delay(1);
    lcd_send_cmd(0x01);
    HAL_Delay(1);
    HAL_Delay(1);
    lcd_send_cmd(0x06);
    HAL_Delay(1);
    lcd_send_cmd(0x0C);
}


void lcd_send_cmd(char cmd) {

	 char data_u, data_l;
	 uint8_t data_t[4];

	 data_u = cmd&0xf0;
	 data_l = (cmd<<4)&0xf0;

	 data_t[0] = data_u|0x0C; // en = 1, rs = 0
	 data_t[1] = data_u|0x08; // en = 0, rs = 0
	 data_t[2] = data_l|0x0C; // en = 1, rs = 0
	 data_t[3] = data_l|0x08; // en = 0, rs = 0

     HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);

}


void lcd_send_data(char data) {

	 char data_u, data_l;

	 uint8_t data_t[4];

	 data_u = (data&0xf0);
	 data_l = ((data<<4)&0xf0);

	 data_t[0] = data_u|0x0D; // en = 1, rs = 1
	 data_t[1] = data_u|0x09; // en = 0, rs = 1
	 data_t[2] = data_l|0x0D; // en = 1, rs = 1
	 data_t[3] = data_l|0x09; // en = 0, rs = 1

     HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
}

void lcd_send_string(char*str){
	while(*str) lcd_send_data(*str++);
}


///////////////////////// ACCELEROMETER CONFIGURATION ///////////////////////

void MPU6050_Init(void){
	uint8_t check, Data;
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR , WHO_AM_I_REG, 1, &check, 1, 1000);

	if (check == 104){

	Data = 0;
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR , PWR_MGMT_1_REG, 1, &Data, 1, 1000);

	Data = 0x07;
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR , SMPLRT_DIV_REG, 1, &Data, 1, 1000);

	Data = 0x00;
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR , ACCEL_CONFIG_REG, 1, &Data, 1, 1000);

	Data = 0x00;
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR , GYRO_CONFIG_REG, 1, &Data, 1, 1000);

	}
}

void MPU6050_Read_Accel(void){

	uint8_t Rec_Data[6];

    HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);

	Ax = Accel_X_RAW/16384.0;
	Ay = Accel_Y_RAW/16384.0;
	Az = Accel_Z_RAW/16384.0;
}

void MPU6050_Read_Gyro(void){

	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);

	Gx = Gyro_X_RAW/131.0;
	Gy = Gyro_Y_RAW/131.0;
	Gz = Gyro_Z_RAW/131.0;
}


/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	const static uint32_t stackSize = 128;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  SEGGER_SYSVIEW_Conf();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART3_UART_Init();
  MX_I2C1_Init();
  MX_TIM3_Init();
  MX_I2C2_Init();
  /* USER CODE BEGIN 2 */

  lcd_init2();

  //////////////////////ACELEROMETRO ///////////////

  MPU6050_Init();


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of movingSem */
  movingSemHandle = osSemaphoreNew(1, 1, &movingSem_attributes);

  /* creation of stopSem */
  stopSemHandle = osSemaphoreNew(1, 0, &stopSem_attributes);

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);	//ensure proper priority grouping for freeRTOS



///////////////////////////////////////// TASKS //////////////////////////////////////////////////////////


if (xTaskCreate(Infrared, "task1", stackSize, NULL, tskIDLE_PRIORITY, NULL) == pdPASS) {
    if (xTaskCreate(StopTask, "task2", stackSize, NULL, tskIDLE_PRIORITY, NULL) == pdPASS) {
        if (xTaskCreate(DetectTask, "task3", stackSize, NULL, tskIDLE_PRIORITY, NULL) == pdPASS) {
            if (xTaskCreate(LCDScreenTask, "task4", stackSize, NULL, tskIDLE_PRIORITY, NULL) == pdPASS) {

                    vTaskStartScheduler();
                }
            }
        }
    }



///CALL TO THE TASK OF PRINTING ACCELEROMETER INFORMATION ON THE SCREEN//

//if (xTaskCreate(LCDwithAcelerometer, "task1", stackSize, NULL, tskIDLE_PRIORITY , NULL) == pdPASS){
//	  vTaskStartScheduler();
//	}


///////////////////////////////////////////////////////////////////////////////////////////////////////////


  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x20404768;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
  hi2c2.Init.Timing = 0x20404768;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_IC_InitTypeDef sConfigIC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 216-1;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 4;
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREENLED_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, IN2B_Pin|IN1B_Pin|IN1A_Pin|IN2A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN4B_Pin|IN3B_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|IN4A_Pin|IN3A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : INF2_Pin INF1_Pin */
  GPIO_InitStruct.Pin = INF2_Pin|INF1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : TRIGGER_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(TRIGGER_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : GREENLED_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = GREENLED_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : IN2B_Pin IN1B_Pin IN1A_Pin IN2A_Pin */
  GPIO_InitStruct.Pin = IN2B_Pin|IN1B_Pin|IN1A_Pin|IN2A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : IN4B_Pin IN3B_Pin LED1_Pin */
  GPIO_InitStruct.Pin = IN4B_Pin|IN3B_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin IN4A_Pin IN3A_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|IN4A_Pin|IN3A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END 5 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
